drop:[-];

true:drop+;
false:drop;

movl:<<drop>>[-<<+>>]<<;
movr:>>drop<<[->>+<<]>>;
movlh:<drop>[-<+>]<;
movrh:>drop<[->+<]>;

dup:[->+>+<<]>movlh>>;
duph:[-<+>>+<]<movrh>;
duphs:[->+>>+<<<]>>>[-<<<+>>>]<<;
dupoh:[->+>>+<<<]>movlh>>>;
duphoh:[-<+>>+>>+<<<]<movrh>>>;
dupl:[-<+<+>>]<movrh<<;
hduph:[->>+>>+<<<<]>>>>[-<<<<+>>>>]<<;
hdupo:[->>+>+<<<]>>movl>>>;
hdupoh:[->>+>>+<<<<]>>movl>>>>;

for:[>>;
for_getI:<<<hdupo;
for_getNI:<<dup-;
endfor:<<<+>-]<movrh;

// IF
if:duph[drop>;
endif:<]<;

// IF-ELSE
// tape:[eNtX]
// e - else flag
// N - entry
// t - temp
// X - next cell
ife:
    <true> // e
    duphs  // t
    [drop<<false // e
    >>> // X
;
else:
    < // t
    ]<< // e
    [drop>>> // X
;
endife:
    <<< // e
    ]> // N
;

// BOOLEAN LOGIC
not:
    if
        <<[-]->>
    endif
    +
;
and:
    ife
        <<drop<<
        if
            <<true>>
        endif
        >>
    else
        <<<<drop>>
    endife
;
or:add;

// LOGIC
// TODO: implement proper >, >= and <=
// TODO: check if works near 255 values

gt:+gte;
gte:lt not;
lte:-lt;

// OzNZ
// N  - entry
// O  - other number
// zZ - zeros
lt:
<drop       // z = 0
>>drop      // Z = 0
<[          // N
    <<      // O
    [-
        >>- // N
        <   // z
    ]
    >       // N
]
>[>]<       // sync to N
drop
<<;         // O

// ARITHMETICS
add:[-<<+>>]<<;
