
// 0-7 taken for regs
r1:$0;
r2:$4;

// duplicates a number to a corresponding reg
// uses 2 bytes of space
duptor1:r1[-]>[-]#[-r1+>+#]r1>[-#+r1>]#;
duptor2:r2[-]>[-]#[-r2+>+#]r2>[-#+r2>]#;
dup2tor1:duptor1 r1>>[-]>[-]<<<[->>+<<]#<duptor1 r1>>[-<+>]#;
dup2tor2:duptor2 r2>>[-]>[-]<<<[->>+<<]#<duptor2 r2>>[-<+>]#;

// a = tape[i], b = tape[i-1]; return a == b;
// return value is saved on r2
// uses 3 bytes of space
eq:dup2tor2 r2>>+<<[->-<]>[[-]>[-]<]>[-<<+>>]#;

// a = tape[i], b = tape[i-1]; return b % a;
// return value is saved in r1
// uses >=3 bytes of space
mod:dup2tor1 r1[->>+eq r2[[-]r1>>[-]#]#<]>[-]>[-<<+>>]#;
// mod:dup2tor1 r1 // copy the values to r1 like this: [b, a, -, -]
//     [ // while b > 0
//         - // b--
//         >>+ // c++
//         eq r2 [[-] // if c == a
//             r1 >> [-] // c = 0
//             # // go back to r2
//             ] // endif
//         #< // go back to b
//     ] // end the loop
//     >[-] // clean a
//     >[-<<+>>] // move c to r1
//     # // return
// ;



// writing output to console
println:print 10+.[-];
print:{<[<]>[.>]<clear};
clear:[[-]<]>;

$8  10 +> 7 + mod r1 48+ println
$10 13 +> 7 + mod r1 48+ println
$12 19 +> 5 + mod r1 48+ println
$14 255+> 9 + mod r1 48+ println
$16 137+> 6 + mod r1 48+ println
$18 69 +> 13+ mod r1 48+ println
$20 228+> 69+ mod r1 48+ println
$22 88 +> 21+ mod r1 48+ println
